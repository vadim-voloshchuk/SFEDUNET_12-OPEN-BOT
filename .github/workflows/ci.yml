name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        mypy bot.py --ignore-missing-imports
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=bot --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
      continue-on-error: true

    - name: Check dependencies for vulnerabilities
      run: |
        pip freeze | safety check --stdin || true
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t sfedunet-bot:latest .

    - name: Test Docker image
      run: |
        docker run --rm sfedunet-bot:latest python -c "import bot; print('Docker image works!')"

    - name: Login to Docker Hub (optional - uncomment if needed)
      # uses: docker/login-action@v3
      # with:
      #   username: ${{ secrets.DOCKER_USERNAME }}
      #   password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub (optional - uncomment if needed)
      # run: |
      #   docker tag sfedunet-bot:latest ${{ secrets.DOCKER_USERNAME }}/sfedunet-bot:latest
      #   docker push ${{ secrets.DOCKER_USERNAME }}/sfedunet-bot:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "ðŸš€ Ready for deployment!"
        echo "Docker image built successfully"
        echo "All tests passed âœ…"

    # Uncomment and configure for actual deployment
    # - name: Deploy to production
    #   run: |
    #     # Add your deployment commands here
    #     # For example, using SSH to deploy to a server:
    #     # ssh user@server 'cd /path/to/app && docker-compose pull && docker-compose up -d'