#!/usr/bin/env python3
"""Telegram –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤."""

import logging
import os
import sys
import json
import requests
import time
import random
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
from realtime_state import get_state_manager
from config import BOT_TOKEN, VK_LINK_PATTERN, load_stands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger('telegram_bot')

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.state_manager = get_state_manager()
        self.offset = 0

    def create_keyboard(self, user_id):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = self.state_manager.get_user(user_id)

        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ - —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if user['awaiting_name'] or user['awaiting_vk_link'] or user.get('pending_question'):
            return {'remove_keyboard': True}

        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        completed_stands = sum(1 for s in user['stand_status'].values() if s['done'])
        total_stands = len(user['stand_status'])
        has_vk = user.get('vk_verified', False)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ —Å—Ç–µ–Ω–¥—ã –∏ –¥–æ–±–∞–≤–∏–ª –í–ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        if completed_stands == total_stands and has_vk:
            keyboard.append(['üéÅ –†–æ–∑—ã–≥—Ä—ã—à'])
            keyboard.append(['üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'])
            return {
                'keyboard': keyboard,
                'resize_keyboard': True,
                'one_time_keyboard': False
            }

        # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ —Å—Ç–µ–Ω–¥—ã –Ω–æ –Ω–µ—Ç –í–ö
        if completed_stands == total_stands and not has_vk:
            keyboard.append(['üîó –î–æ–±–∞–≤–∏—Ç—å –í–ö'])
            keyboard.append(['üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'])
            return {
                'keyboard': keyboard,
                'resize_keyboard': True,
                'one_time_keyboard': False
            }

        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        row1 = ['üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', 'üéÆ –°—Ç–µ–Ω–¥—ã']
        keyboard.append(row1)

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Å—Ç–µ–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        incomplete_stands = [
            stand_id for stand_id, status in user['stand_status'].items()
            if not status['done']
        ]

        if incomplete_stands:
            stands = load_stands()
            stands_dict = {stand['id']: stand for stand in stands}
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–µ–Ω–¥
            first_incomplete = incomplete_stands[0]
            if first_incomplete in stands_dict:
                stand_info = stands_dict[first_incomplete]
                keyboard.append([f"üéØ –ü—Ä–æ–π—Ç–∏ {stand_info['description']}"])

        return {
            'keyboard': keyboard,
            'resize_keyboard': True,
            'one_time_keyboard': False
        }

    def send_message(self, chat_id, text, user_id=None, use_keyboard=True):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
        url = f"{self.api_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if use_keyboard and user_id:
            keyboard = self.create_keyboard(user_id)
            data['reply_markup'] = json.dumps(keyboard)

        try:
            response = requests.post(url, data=data, timeout=10)
            result = response.json()
            if result.get('ok'):
                logger.info(f"Message sent to {chat_id}: {text[:50]}...")
            else:
                logger.error(f"Failed to send message: {result}")
            return result
        except Exception as e:
            logger.error(f"Failed to send message: {e}")
            return None

    def get_updates(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Telegram."""
        url = f"{self.api_url}/getUpdates"
        params = {
            'offset': self.offset,
            'timeout': 10
        }

        try:
            response = requests.get(url, params=params, timeout=15)
            return response.json()
        except Exception as e:
            logger.error(f"Failed to get updates: {e}")
            return None

    def handle_start(self, chat_id, user_id, username):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start."""
        logger.info(f"User {user_id} started bot")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.state_manager.get_user(user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if user['full_name'] is None:
            self.state_manager.update_user(user_id, {
                'awaiting_name': True
            })

            self.send_message(
                chat_id,
                "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Sfedunet 12!</b>\n\n"
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                "1Ô∏è‚É£ –ü—Ä–æ–π—Ç–∏ –≤—Å–µ —Å—Ç–µ–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
                "2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
                user_id=user_id
            )
        else:
            self.show_main_menu(chat_id, user_id)

    def handle_name_input(self, chat_id, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.state_manager.update_user(user_id, {
            'full_name': text.strip(),
            'awaiting_name': False
        })

        logger.info(f"User {user_id} set name: {text}")

        self.send_message(
            chat_id,
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ, {text}!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Å—Ç–µ–Ω–¥–æ–≤.",
            user_id=user_id
        )

        self.show_main_menu(chat_id, user_id)

    def handle_vk_input(self, chat_id, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –í–ö —Å—Å—ã–ª–∫–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
        if not VK_LINK_PATTERN.match(text.strip()):
            self.send_message(
                chat_id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ vk.com/username\n"
                "‚Ä¢ https://vk.com/username\n"
                "‚Ä¢ www.vk.com/username",
                user_id=user_id
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–ö –ø—Ä–æ—Ñ–∏–ª—å
        self.state_manager.update_user(user_id, {
            'vk_profile': text.strip(),
            'vk_verified': True,
            'awaiting_vk_link': False
        })

        logger.info(f"User {user_id} added VK profile: {text}")

        self.send_message(
            chat_id,
            "‚úÖ <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!",
            user_id=user_id
        )

        self.show_main_menu(chat_id, user_id)

    def start_stand_questions(self, chat_id, user_id, stand_description):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–µ–Ω–¥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        stands = load_stands()
        stands_dict = {stand['id']: stand for stand in stands}
        found_stand = None

        for stand_id, stand_info in stands_dict.items():
            if stand_info['description'] == stand_description:
                found_stand = (stand_id, stand_info)
                break

        if not found_stand:
            self.send_message(chat_id, "‚ùå –°—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", user_id=user_id)
            return

        stand_id, stand_info = found_stand
        user = self.state_manager.get_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É–∂–µ —Å—Ç–µ–Ω–¥
        if user['stand_status'][stand_id]['done']:
            self.send_message(chat_id, f"‚úÖ –°—Ç–µ–Ω–¥ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω!", user_id=user_id)
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å—Ç–µ–Ω–¥–∞
        if 'questions' not in stand_info or not stand_info['questions']:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–æ—Å—Ç–æ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–µ–Ω–¥
            self.complete_stand(chat_id, user_id, stand_id, stand_info)
            return

        random_question = random.choice(stand_info['questions'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.state_manager.update_user(user_id, {
            'pending_question': {
                'stand_id': stand_id,
                'question': random_question['question'],
                'answers': random_question['answers'],
                'hint': random_question.get('hint', '–ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏')
            }
        })

        text = f"üéØ <b>{stand_info['emoji']} {stand_info['description']}</b>\n\n"
        text += f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>\n{random_question['question']}\n\n"
        text += "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"

        self.send_message(chat_id, text, user_id=user_id)

    def handle_question_answer(self, chat_id, user_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
        user = self.state_manager.get_user(user_id)
        pending_question = user.get('pending_question')

        if not pending_question:
            self.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!", user_id=user_id)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        user_answer = text.strip().lower()
        correct_answers = [answer.lower() for answer in pending_question['answers']]

        if user_answer in correct_answers:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            stand_id = pending_question['stand_id']
            stands = load_stands()
            stands_dict = {stand['id']: stand for stand in stands}
            stand_info = stands_dict[stand_id]

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–µ–Ω–¥
            self.complete_stand(chat_id, user_id, stand_id, stand_info)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            self.send_message(
                chat_id,
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!</b>\n\n"
                f"{pending_question['hint']}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                user_id=user_id
            )

    def complete_stand(self, chat_id, user_id, stand_id, stand_info):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ç–µ–Ω–¥."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–Ω–¥–∞ –∏ —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        user = self.state_manager.get_user(user_id)
        updates = {
            'stand_status': {
                **user['stand_status'],
                stand_id: {'done': True}
            },
            'pending_question': None
        }
        self.state_manager.update_user(user_id, updates)

        logger.info(f"User {user_id} completed stand: {stand_id}")

        text = f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        text += f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Å—Ç–µ–Ω–¥:\n{stand_info['emoji']} <b>{stand_info['description']}</b>\n\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        user = self.state_manager.get_user(user_id)  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        completed_stands = sum(1 for s in user['stand_status'].values() if s['done'])
        total_stands = len(user['stand_status'])

        if completed_stands == total_stands:
            text += f"üèÜ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å—Ç–µ–Ω–¥—ã!</b>\n"
            text += f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –í–ö –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
        else:
            text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_stands}/{total_stands} —Å—Ç–µ–Ω–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"

        self.send_message(chat_id, text, user_id=user_id)

    def show_main_menu(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        user = self.state_manager.get_user(user_id)

        text = f"üèÜ <b>–ü—Ä–∏–≤–µ—Ç, {user['full_name']}!</b>\n\n"
        text += "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç–µ–Ω–¥–∞–º:</b>\n\n"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã
        stands = load_stands()
        stands_dict = {stand['id']: stand for stand in stands}

        for stand_id, stand_info in stands_dict.items():
            status = "‚úÖ" if user['stand_status'][stand_id]['done'] else "‚ùå"
            title = f"{stand_info['emoji']} {stand_info['description']}"
            text += f"{status} {title}\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_stands = sum(1 for s in user['stand_status'].values() if s['done'])
        total_stands = len(user['stand_status'])

        text += f"\nüìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {completed_stands}/{total_stands} —Å—Ç–µ–Ω–¥–æ–≤"

        if completed_stands == total_stands:
            text += "\n\nüéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Å—Ç–µ–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</b>"
            text += "\nüéÅ –í—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤!"

        self.send_message(chat_id, text, user_id=user_id)

    def request_vk_link(self, chat_id, user_id):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –í–ö —Å—Å—ã–ª–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.state_manager.update_user(user_id, {
            'awaiting_vk_link': True
        })

        self.send_message(
            chat_id,
            "üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ vk.com/ivan_petrov\n"
            "‚Ä¢ https://vk.com/ivan_petrov\n"
            "‚Ä¢ www.vk.com/ivan_petrov",
            user_id=user_id
        )

    def show_giveaway_info(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ."""
        self.send_message(
            chat_id,
            "üéÅ <b>–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤ Sfedunet 12</b>\n\n"
            "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\n"
            "üìã <b>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n"
            "‚úÖ –ü—Ä–æ–π—Ç–∏ –≤—Å–µ —Å—Ç–µ–Ω–¥—ã ‚úì\n"
            "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –í–ö –ø—Ä–æ—Ñ–∏–ª—å ‚úì\n\n"
            "üéØ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏!",
            user_id=user_id
        )

    def show_stands_menu(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å—Ç–µ–Ω–¥–æ–≤."""
        user = self.state_manager.get_user(user_id)

        text = f"üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–Ω–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b>\n\n"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã
        stands = load_stands()
        stands_dict = {stand['id']: stand for stand in stands}

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–µ–Ω–¥—ã —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º
        available_stands = []
        for stand_id, stand_info in stands_dict.items():
            status = "‚úÖ" if user['stand_status'][stand_id]['done'] else "üîò"
            title = f"{status} {stand_info['emoji']} {stand_info['description']}"
            text += f"{title}\n"

            if not user['stand_status'][stand_id]['done']:
                available_stands.append(stand_info['description'])

        if available_stands:
            text += f"\nüí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã:</b>\n"
            text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–µ–Ω–¥–∞ —Å–Ω–∏–∑—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è."
        else:
            text += f"\nüéâ <b>–í—Å–µ —Å—Ç–µ–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã!</b>"

        self.send_message(chat_id, text, user_id=user_id)

    def process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram."""
        logger.info(f"Processing update: {update.get('update_id', 'unknown')}")

        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            username = message['from'].get('username', '')
            logger.info(f"Received message from user {user_id}: {message.get('text', 'no text')}")

            if 'text' in message:
                text = message['text']

                if text == '/start':
                    self.handle_start(chat_id, user_id, username)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = self.state_manager.get_user(user_id)

                    if user['awaiting_name']:
                        self.handle_name_input(chat_id, user_id, text)
                    elif user['awaiting_vk_link']:
                        self.handle_vk_input(chat_id, user_id, text)
                    elif user.get('pending_question'):
                        self.handle_question_answer(chat_id, user_id, text)
                    else:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–æ–∫
                        if text == 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å':
                            logger.info(f"User {user_id} clicked: '–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'")
                            self.show_main_menu(chat_id, user_id)
                        elif text == 'üéÆ –°—Ç–µ–Ω–¥—ã':
                            logger.info(f"User {user_id} clicked: '–°—Ç–µ–Ω–¥—ã'")
                            self.show_stands_menu(chat_id, user_id)
                        elif text == 'üîó –î–æ–±–∞–≤–∏—Ç—å –í–ö':
                            logger.info(f"User {user_id} clicked: '–î–æ–±–∞–≤–∏—Ç—å –í–ö'")
                            self.request_vk_link(chat_id, user_id)
                        elif text == 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à':
                            logger.info(f"User {user_id} clicked: '–†–æ–∑—ã–≥—Ä—ã—à'")
                            self.show_giveaway_info(chat_id, user_id)
                        elif text.startswith('üéØ –ü—Ä–æ–π—Ç–∏ '):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏
                            stand_description = text.replace('üéØ –ü—Ä–æ–π—Ç–∏ ', '')
                            logger.info(f"User {user_id} starting stand: '{stand_description}'")
                            self.start_stand_questions(chat_id, user_id, stand_description)
                        else:
                            logger.info(f"User {user_id} sent unknown text: '{text}' - showing main menu")
                            self.show_main_menu(chat_id, user_id)

        else:
            logger.warning(f"Unknown update type: {list(update.keys())}")

    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."""
        logger.info('Starting Telegram Bot with realtime state...')

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        def on_state_change(data):
            logger.info(f'State changed! Total users: {len(data)}')

        self.state_manager.subscribe(on_state_change)
        logger.info('Bot initialized successfully with realtime state.')

        try:
            logger.info('Starting bot polling loop...')

            while True:
                updates_response = self.get_updates()

                if updates_response and updates_response.get('ok'):
                    updates = updates_response.get('result', [])

                    for update in updates:
                        try:
                            self.process_update(update)
                            self.offset = update['update_id'] + 1
                        except Exception as e:
                            logger.error(f"Error processing update: {e}")
                            continue

                time.sleep(1)

        except KeyboardInterrupt:
            logger.info('Bot interrupted by user.')
        except Exception as exc:
            logger.error('Bot error: %s', str(exc), exc_info=True)
            raise
        finally:
            self.state_manager.stop()
            logger.info('Bot stopped.')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_TOKEN not found in environment variables")
        return

    bot = TelegramBot(BOT_TOKEN)
    bot.run()

if __name__ == '__main__':
    main()