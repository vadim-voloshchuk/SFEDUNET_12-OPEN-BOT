"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞."""

import json
import os
import re
from pathlib import Path
from typing import Any, Dict, List

# –ü—É—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DATA_PATH = Path(os.getenv('BOT_STATE_PATH', 'data/state.json'))
POLL_TIMEOUT = 30

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', '')

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_FILE_PATH = 'data/state.json'

# –¢–µ–∫—Å—Ç—ã
SCHEDULE_TEXT = (
    'üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è Sfedunet 12*\n\n'
    'üåÖ *09:30* ‚Äì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ ‚òï\n'
    'üéâ *10:00* ‚Äì –¶–µ—Ä–µ–º–æ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å —à–æ—É-–∫–µ–π—Å–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ\n'
    'üî¨ *11:00* ‚Äì –†–∞–±–æ—Ç–∞ —Å—Ç–µ–Ω–¥–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω üéØ\n'
    'üé§ *13:00* ‚Äì –ü–∏—Ç—á-—Å–µ—Å—Å–∏—è —Ñ–∏–Ω–∞–ª–∏—Å—Ç–æ–≤ üí°\n'
    'üë• *15:00* ‚Äì –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –∫–æ–º—å—é–Ω–∏—Ç–∏ –º–∏—Ç–∞–ø—ã üõ†Ô∏è\n'
    'üèÜ *17:30* ‚Äì –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ –∞—Ñ—Ç–µ–ø–∞—Ç–∏ üéä\n\n'
    '‚ú® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–µ–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!'
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–µ–Ω–¥–æ–≤ –∏–∑ JSON
def load_stands():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        stands_file = Path('data/stands.json')
        if stands_file.exists():
            with open(stands_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            print(f"[Config] –§–∞–π–ª —Å—Ç–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {stands_file}")
            return []
    except Exception as e:
        print(f"[Config] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–µ–Ω–¥–æ–≤: {e}")
        return []

def save_stands(stands):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –≤ JSON —Ñ–∞–π–ª."""
    try:
        stands_file = Path('data/stands.json')
        stands_file.parent.mkdir(parents=True, exist_ok=True)

        with open(stands_file, 'w', encoding='utf-8') as f:
            json.dump(stands, f, ensure_ascii=False, indent=2)
        print(f"[Config] –°—Ç–µ–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {stands_file}")
        return True
    except Exception as e:
        print(f"[Config] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤: {e}")
        return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–µ–Ω–¥—ã –∏–∑ JSON
STANDS = load_stands()

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
VK_LINK_PATTERN = re.compile(r'^(https?://)?(www\.)?vk\.com/([A-Za-z0-9_.]+)/?$')

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    'first_stand': 'üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –í—ã –ø—Ä–æ—à–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–µ–Ω–¥!',
    'half_complete': '‚ö° *–û—Ç–ª–∏—á–Ω–æ!* –í—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ –ø—Ä–∏–∑—É!',
    'all_complete': 'üèÜ *–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!* –í—Å–µ —Å—Ç–µ–Ω–¥—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!',
    'registration_complete': '‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Sfedunet 12!'
}

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_BARS = {
    0: '‚¨ú‚¨ú‚¨ú',
    1: 'üü¶‚¨ú‚¨ú',
    2: 'üü¶üü¶‚¨ú',
    3: 'üü¶üü¶üü¶'
}